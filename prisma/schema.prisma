datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  schemas  = ["user", "public"]
}

generator client {
  provider = "prisma-client-js"
  previewFeatures = ["multiSchema"]

}
model Device {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  customerId String
  customer   User       @relation("customer", fields: [customerId], references: [id], onDelete: Cascade)
  plantId    String
  plant      Plant      @relation("plant", fields: [plantId], references: [id], onDelete: Cascade)
  sn         String     @unique
  deviceType DeviceType


  @@schema("public")
}

enum DeviceType {
  BATTERY
  INVERTER

  @@schema("public")
}

model Location {
    id          Int           @id @default(autoincrement())
    latitude    Float
    longitude   Float
    user        User?         @relation
    createdAt   DateTime      @default(now())
    updatedAt   DateTime      @updatedAt
    plants      Plant[]
    @@schema("public")
}

model Plant {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())

  customerId String
  customer   User   @relation("customer", fields: [customerId], references: [id], onDelete: Cascade)

  installerId String
  installer   User   @relation("installer", fields: [installerId], references: [id], onDelete: Cascade)

  name               String    @unique
  plantType          PlantType
  capacity           Int
  region             String
  locationId         Int       @unique
  location           Location  @relation(fields: [locationId], references: [id], onDelete: Cascade)
  tariff             Float
  timeZone           String?
  address            String
  currency           String    @default("USD")
  installationDate   DateTime  @default(now())
  gridConnectionType String?
  gridConnectionDate DateTime?
  notes              String?
  imagesNotes        String?
  plantProfile       String?
  plantImage         Media[]
  AutoId             String?    @unique
  device             Device[]  @relation("plant")

  @@schema("public")
}

enum PlantType {
  Grid
  Grid_Meter
  Hybrid

  @@schema("public")
}

model Media {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  file_url  String
  plantId   String
  plant     Plant    @relation(fields: [plantId], references: [id], onDelete: Cascade)

  @@schema("public")
}

model User {
    id           String            @id @default(uuid())
    email        String            @unique
    password     String?
    phoneNumber  String
    role         Role
    IsActive     Boolean           @default(true)
    createdAt    DateTime          @default(now())
    locationId   Int?              @unique
    location     Location?         @relation(fields: [locationId], references: [id], onDelete: Cascade)
    fullName     String
    address      String?
    fcmToken     String?
    imageUrl    String?
    TFA_enabled  Boolean           @default(false)
    verification UserVerification?
    customer     Plant[]           @relation("customer")
    installer    Plant[]           @relation("installer")
    language    String    
        
    parentId String?
    parent   User?   @relation("UserHierarchy", fields: [parentId], references: [id])
    children User[]  @relation("UserHierarchy")
    device   Device[]   @relation("customer")
    activity ActivityLog[]

    @@schema("user")
}

model UserVerification {
    id                Int                @id @default(autoincrement())
    userId            String             @unique
    resetOtp          Int?
    resetOtpExpiresAt DateTime?
    isEmailVerified   VerificationStatus @default(NOT_VERIFIED)
    refreshToken      String?
    user              User               @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@schema("user")
}

enum Role {
    ADMIN
    SUB_ADMIN
    DISTRIBUTOR
    INSTALLER
    CUSTOMER

    @@schema("user")
}

enum VerificationStatus {
    VERIFIED
    NOT_VERIFIED

    @@schema("user")
}

model ActivityLog {
    id          String   @id @default(uuid())
    userId      String
    user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    action    String
    description String?
    createdAt   DateTime @default(now())

    @@schema("user")
}
